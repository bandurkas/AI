require('dotenv').config();
const { default: makeWASocket, useMultiFileAuthState, DisconnectReason } = require('@whiskeysockets/baileys');
const axios = require('axios');
const fs = require('fs');
const express = require('express');
const QRCode = require('qrcode');

const AUTH_DIR = './auth_info';
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const PORT = process.env.PORT || 3000;

let latestQR = null; // —Ö—Ä–∞–Ω–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π QR-–∫–æ–¥

if (!OPENAI_API_KEY) {
  console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á OPENAI_API_KEY –≤ .env');
  process.exit(1);
}

const SYSTEM_PROMPT = `–í—ã ‚Äî AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç Perfect Systems. –í–∞—à–∞ —Ü–µ–ª—å ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –±–∏–∑–Ω–µ—Å-–æ–ø–µ—Ä–∞—Ü–∏–∏, —É—Å—Ç—Ä–∞–Ω—è—è —Ä—É—Ç–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ —É—Å–∫–æ—Ä—è—è –ø—Ä–æ—Ü–µ—Å—Å—ã. –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ 24/7, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±—É—á–∞–µ—Ç–µ—Å—å –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç–µ—Å—å –∫ –±–∏–∑–Ω–µ—Å—É –∫–ª–∏–µ–Ω—Ç–∞.

–í–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –ø–æ–º–æ—â—å 24/7
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞—á –∏ –æ—Ç—Ä–∞—Å–ª–∏
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–∞ (CRM, HRM, –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã)
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –æ–ø–µ—Ä–∞—Ü–∏–π
‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ä–æ—Å—Ç –≤–º–µ—Å—Ç–µ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π

–ö–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
1. **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤** ‚Äî –∞–¥–∞–ø—Ç–∞—Ü–∏—è, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—É—á–µ–Ω–∏—é, —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–∏—á–∫–æ–≤.
2. **–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏** ‚Äî –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏, –≤—ã—è–≤–ª–µ–Ω–∏–µ —É–∑–∫–∏—Ö –º–µ—Å—Ç –≤ –≤–æ—Ä–æ–Ω–∫–µ.
3. **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤** ‚Äî FAQ, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤, —Å–±–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.
4. **–ü–æ–º–æ—â—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É** ‚Äî –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫, —É–ø—Ä–æ—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π, –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ BI-—Å–∏—Å—Ç–µ–º–∞—Ö.

–í—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ:
- –ë—ã—Å—Ç—Ä–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
- –ì–∏–±–∫–∏–µ —Ç–∞—Ä–∏—Ñ—ã (Free, Basic, Premium, Deluxe, Elite, Enterprise)
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å
- –≠–∫–æ–Ω–æ–º–∏—é —Ä–µ—Å—É—Ä—Å–æ–≤, —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª –∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

–ì–æ–≤–æ—Ä–∏—Ç–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø–æ–Ω—è—Ç–Ω–æ, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ç–æ–Ω–æ–º. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –ø–æ–º–æ—â—å –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –Ω–∞–≤–æ–¥—è—â–∏–π –≤–æ–ø—Ä–æ—Å. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç—å AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ Perfect Systems –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –ª—é–±–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∞.`;

// –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è QR-–∫–æ–¥–∞
const app = express();

app.get('/', (req, res) => {
  res.send(`
    <h2>WhatsApp OpenAI –ë–æ—Ç (Perfect Systems)</h2>
    <p>–°—Ç–∞—Ç—É—Å: <span id="status">–û–∂–∏–¥–∞–Ω–∏–µ...</span></p>
    <div id="qr"></div>
    <script>
      async function fetchQR() {
        const r = await fetch('/qr');
        if (r.status === 200) {
          const { qr } = await r.json();
          if (qr) {
            document.getElementById('qr').innerHTML = '<img src="'+qr+'" alt="QR Code"/><p>–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ WhatsApp</p>';
            document.getElementById('status').textContent = "–û–∂–∏–¥–∞–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...";
          } else {
            document.getElementById('qr').innerHTML = '';
            document.getElementById('status').textContent = "–ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!";
          }
        }
      }
      setInterval(fetchQR, 2000);
      fetchQR();
    </script>
  `);
});

app.get('/qr', async (req, res) => {
  if (latestQR) {
    const dataUrl = await QRCode.toDataURL(latestQR);
    res.json({ qr: dataUrl });
  } else {
    res.json({ qr: null });
  }
});

app.listen(PORT, () => {
  console.log(`üåç –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});

async function connectToWhatsApp() {
  if (!fs.existsSync(AUTH_DIR)) {
    fs.mkdirSync(AUTH_DIR);
  }
  const { state, saveCreds } = await useMultiFileAuthState(AUTH_DIR);

  const sock = makeWASocket({
    auth: state,
  });

  sock.ev.on('connection.update', (update) => {
    const { connection, lastDisconnect, qr } = update;
    if (qr) {
      latestQR = qr;
      console.log('üì± QR-–∫–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.');
    }
    if (connection === 'close') {
      const reason = lastDisconnect?.error?.output?.statusCode;
      latestQR = null;
      if (reason === DisconnectReason.loggedOut) {
        console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.');
        process.exit(0);
      } else {
        console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
        connectToWhatsApp();
      }
    } else if (connection === 'open') {
      latestQR = null;
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WhatsApp!');
    } else if (connection === 'connecting') {
      console.log('‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WhatsApp...');
    }
  });

  sock.ev.on('creds.update', saveCreds);

  sock.ev.on('messages.upsert', async (m) => {
    const msg = m.messages && m.messages[0];
    if (!msg?.message || msg.key.fromMe) return;
    const sender = msg.key.remoteJid;
    let text = '';
    if (msg.message.conversation) {
      text = msg.message.conversation;
    } else if (msg.message.extendedTextMessage) {
      text = msg.message.extendedTextMessage.text;
    } else if (msg.message.imageMessage && msg.message.imageMessage.caption) {
      text = msg.message.imageMessage.caption;
    }
    if (!text.trim()) return;

    console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${sender}: ${text}`);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º—Ç–æ–º
    const openaiMessages = [
      { role: 'system', content: SYSTEM_PROMPT },
      { role: 'user', content: text }
    ];

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ OpenAI API
    try {
      const response = await axios.post(
        'https://api.openai.com/v1/chat/completions',
        {
          model: 'gpt-4',
          messages: openaiMessages,
          max_tokens: 1000,
        },
        {
          headers: {
            'Authorization': `Bearer ${OPENAI_API_KEY}`,
            'Content-Type': 'application/json'
          }
        }
      );
      const openaiReply = response.data.choices?.[0]?.message?.content?.trim();
      if (openaiReply) {
        await sock.sendMessage(sender, { text: openaiReply }, { quoted: msg });
      } else {
        await sock.sendMessage(sender, { text: 'ü§ñ –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI.' }, { quoted: msg });
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI:', err?.response?.data || err.message);
      await sock.sendMessage(sender, { text: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenAI.' }, { quoted: msg });
    }
  });
}

connectToWhatsApp();

console.log(`
---------------------------
–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞:
1. npm install
2. –°–æ–∑–¥–∞–π—Ç–µ .env —Å –∫–ª—é—á–æ–º OPENAI_API_KEY
3. node index.js
4. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000 –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞
---------------------------
`);
